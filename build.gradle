plugins {
    id 'java'
}

group 'com.xojangstudios'
version '0.0-PreDevelopment'

repositories {
    mavenCentral()
    maven { url "https://repo.spongepowered.org/repository/maven-public/"}
}

// LWJGL Version
def lwjglVersion = '3.3.5'

// OS-specific native library switcher
import org.gradle.internal.os.OperatingSystem

switch (OperatingSystem.current()) {
    case OperatingSystem.FREE_BSD:
        project.ext.lwjglNatives = "natives-freebsd"
        break
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        def osArch = System.getProperty("os.arch")
        if (osArch.startsWith("arm") || osArch.startsWith("aarch64")) {
            project.ext.lwjglNatives += osArch.contains("64") || osArch.startsWith("armv8") ? "-arm64" : "-arm32"
        } else if (osArch.startsWith("ppc")) {
            project.ext.lwjglNatives += "-ppc64le"
        } else if (osArch.startsWith("riscv")) {
            project.ext.lwjglNatives += "-riscv64"
        }
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
        break
    case OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.contains("64")
            ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
            : "natives-windows-x86"
        break
}

// LWJGL Dependencies
dependencies {
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-stb" 
    implementation "org.joml:joml:1.10.7"
    implementation "org.spongepowered:noise:2.0.0-SNAPSHOT"
    implementation 'org.slick2d:slick2d-core:1.0.2'
    

    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
}

// Java Version Compatibility
sourceCompatibility = '17'
targetCompatibility = '17'

// Duplicates Strategy
tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    duplicatesStrategy = 'exclude' // Handle duplicate entries
}

// Build and Run Configuration
jar {
    manifest {
        attributes 'Main-Class': 'com.xojangstudios.eaglecrafty.core.Main'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// Default Task
defaultTasks 'build'

// Define Source Sets
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java'] // Ensure this matches your directory structure
        }
    }
}