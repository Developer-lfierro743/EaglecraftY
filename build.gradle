plugins {
    id 'java'
    id 'application'
}

group 'com.xojangstudios'
version '0.0-PreDevelopment' // or 'v0.0.PreDevelopment' for better semantic versioning

repositories {
    mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

// Define LWJGL and other versions (use enums for better maintainability)
ext {
    lwjglVersion = '3.3.6'
    jomlVersion = '1.10.7'
    jomlPrimitivesVersion = '1.10.0'
    // steamworks4jVersion = '1.9.0' // Commented out for now
    // steamworks4jServerVersion = '1.9.0' // Commented out for now
}

// Define OS-specific native library switcher (improved logic)
def getLwjglNatives() {
    def os = System.getProperty('os.name').toLowerCase()
    def arch = System.getProperty('os.arch').toLowerCase()

    switch (os) {
        case { it.contains('mac') }:
            return arch.startsWith('aarch64') ? 'natives-macos-arm64' : 'natives-macos'
        case { it.contains('windows') }:
            return arch.contains('64') ? 'natives-windows' : 'natives-windows-x86'
        case { it.contains('linux') }:
            if (arch.startsWith('arm') || arch.startsWith('aarch64')) {
                return 'natives-linux-arm' + (arch.contains('64') || arch.startsWith('armv8') ? '64' : '32')
            } else if (arch.startsWith('ppc')) {
                return 'natives-linux-ppc64le'
            } else if (arch.startsWith('riscv')) {
                return 'natives-linux-riscv64'
            }
            return 'natives-linux'
        case { it.contains('freebsd') }:
            return 'natives-freebsd'
        default:
            throw new GradleException("Unsupported OS: $os (Architecture: $arch)")
    }
}

def lwjglNatives = getLwjglNatives()

dependencies {
    implementation platform("org.lwjgl:lwjgl-bom:${lwjglVersion}")

    // LWJGL Core Modules
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    implementation "org.lwjgl:lwjgl-openal"

    // JOML (Math Library)
    implementation "org.joml:joml:${jomlVersion}"
    implementation "org.joml:joml-primitives:${jomlPrimitivesVersion}"

    // Steamworks4J (Commented out for now)
    // implementation "com.code-disaster.steamworks4j:steamworks4j:${steamworks4jVersion}"
    // implementation "com.code-disaster.steamworks4j:steamworks4j-server:${steamworks4jServerVersion}"

    // LWJGL Natives
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

application {
    mainClass = 'com.xojangstudios.eaglecrafty.core.Game'
}

jar {
    manifest {
        attributes 'Main-Class': 'com.xojangstudios.eaglecrafty.core.Game'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}