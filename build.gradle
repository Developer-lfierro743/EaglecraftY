plugins {
    id 'java'
}

group 'com.xojangstudios'
version '0.0-PreDevelopment'

repositories {
    mavenCentral()
}

dependencies {
    // LWJGL dependencies
    implementation platform('org.lwjgl:lwjgl-bom:3.3.4')
    implementation 'org.lwjgl:lwjgl:3.3.4'
    implementation 'org.lwjgl:lwjgl-glfw:3.3.4'
    implementation 'org.lwjgl:lwjgl-opengl:3.3.4'
    implementation 'org.lwjgl:lwjgl-stb:3.3.4'

    // Native dependencies based on the detected OS
    runtimeOnly 'org.lwjgl:lwjgl::natives-linux'
    runtimeOnly 'org.lwjgl:lwjgl-glfw::natives-linux'
    runtimeOnly 'org.lwjgl:lwjgl-opengl::natives-linux'
    runtimeOnly 'org.lwjgl:lwjgl-stb::natives-linux'

    // JOML for math operations
    implementation 'org.joml:joml:1.10.5'

    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}

test {
    useJUnitPlatform()
}

// Exclude duplicate files during build
tasks.withType(Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Custom task to print the current version
task printVersion {
    doLast {
        println "Current version: $version"
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

// Configure the JAR task
jar {
    manifest {
        attributes(
            'Main-Class': 'com.xojangstudios.eaglecrafty.core.Game' // Set the main class
        )
    }

    // Include all dependencies in the JAR (optional, for standalone JAR)
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// Determine the appropriate LWJGL natives based on the operating system and architecture
import org.gradle.internal.os.OperatingSystem

switch (OperatingSystem.current()) {
    case OperatingSystem.FREE_BSD:
        project.ext.lwjglNatives = "natives-freebsd"
        break
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        def osArch = System.getProperty("os.arch")
        if (osArch.startsWith("arm") || osArch.startsWith("aarch64")) {
            project.ext.lwjglNatives += osArch.contains("64") || osArch.startsWith("armv8") ? "-arm64" : "-arm32"
        } else if (osArch.startsWith("ppc")) {
            project.ext.lwjglNatives += "-ppc64le"
        } else if (osArch.startsWith("riscv")) {
            project.ext.lwjglNatives += "-riscv64"
        }
        break
    case OperatingSystem.MACOS:
        project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
        break
    case OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.contains("64") || osArch.startsWith("aarch64") ? "natives-windows-x86-64" : "natives-windows-x86"
        break
}

dependencies {
    // LWJGL dependencies
    runtimeOnly "org.lwjgl:lwjgl:3.3.4:${project.ext.lwjglNatives}"
    runtimeOnly "org.lwjgl:lwjgl-glfw:3.3.4:${project.ext.lwjglNatives}"
    runtimeOnly "org.lwjgl:lwjgl-opengl:3.3.4:${project.ext.lwjglNatives}"
    runtimeOnly "org.lwjgl:lwjgl-stb:3.3.4:${project.ext.lwjglNatives}"

    // JOML for math operations
    implementation 'org.joml:joml:1.10.5'

    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}
